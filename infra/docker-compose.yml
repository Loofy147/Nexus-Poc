version: '3.8'
services:
  prometheus:
    image: prom/prometheus:v2.37.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
    image: grafana/grafana:9.1.0
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one:1.35
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  pyroscope:
    image: pyroscope/pyroscope:0.38.1
    ports:
      - "4040:4040"

  kong-db:
    image: postgres:9.6
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - kong_db_data:/var/lib/postgresql/data

  kong-migrations:
    image: kong:2.8
    depends_on:
      kong-db:
        condition: service_healthy
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
    command: "kong migrations bootstrap"
    restart: on-failure

  kong:
    image: kong:2.8
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
      - KONG_DECLARATIVE_CONFIG=/app/kong-configuration.yaml
    command: "sh -c 'deck sync -s /app/kong-configuration.yaml && kong start'"
    ports:
      - "8000:8000"
      - "8443:8443"
    volumes:
      - ./api-gateway:/app

  neo4j:
    image: neo4j:4.4
    ports: [] # No longer public
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc"]
    volumes:
      - neo4j_data:/data

  redis:
    image: "redis:alpine"
    ports: [] # No longer public

  orchestrator:
    build: ../src/orchestrator
    ports: [] # No longer public
    environment:
      - FLASK_APP=app.py
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - PYROSCOPE_SERVER_ADDRESS=http://pyroscope:4040
      - KNOWLEDGE_RETRIEVER_URL=http://knowledge_retriever:5003
      - MEMORY_LAYER_URL=http://memory_layer:5004
      - EXECUTION_SANDBOX_URL=http://execution_sandbox:5005
      - LLM_ADAPTER_URL=http://llm_adapter_mock:5006
    depends_on:
      - knowledge_retriever
      - memory_layer
      - execution_sandbox
      - llm_adapter_mock
      - prometheus
      - jaeger
      - pyroscope

  knowledge_retriever:
    build: ../src/knowledge_retriever
    ports: [] # No longer public
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
    depends_on:
      - neo4j

  memory_layer:
    build: ../src/memory_layer
    ports: [] # No longer public
    environment:
      - REDIS_HOST=redis
    depends_on:
      - redis

  execution_sandbox:
    build: ../src/execution_sandbox
    ports: [] # No longer public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Mount Docker socket for Docker-in-Docker

  llm_adapter_mock:
    build: ../src/llm_adapter_mock
    ports: [] # No longer public
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}

  meta_controller:
    build: ../src/meta_controller
    ports: [] # No longer public
    environment:
      - PROMETHEUS_URL=http://prometheus:9090
      - CODE_MODIFIER_URL=http://code_modifier:6001
    depends_on:
      - prometheus
      - code_modifier

  code_modifier:
    build: ../src/code_modifier
    ports: [] # No longer public
    environment:
      - GIT_REPO_PATH=/app
    volumes:
      - ../src:/app/src_code # Mount the host's src directory to give it modification access

volumes:
  neo4j_data:
  kong_db_data: